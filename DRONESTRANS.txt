CREATE TABLE DRONES (
	DRONE_ID NUMBER(3) NOT NULL PRIMARY KEY, 
	MODEL VARCHAR2(20), 
	WEIGHT NUMBER(5,3), 
	ADD_WEIGHT NUMBER(5,3), 
	SPEED NUMBER(5,2)) 
PCTFREE 10 
PCTUSED 80 
STORAGE(INITIAL 50K NEXT 50K MAXEXTENTS 5 PCTINCREASE 0);

CREATE TABLE CUSTOMERS (
	CUSTOMER_ID NUMBER(3) NOT NULL PRIMARY KEY,
	NAME VARCHAR2(30),
	EMAIL VARCHAR(30))
PCTFREE 10 
PCTUSED 80 
STORAGE(INITIAL 50K NEXT 50K MAXEXTENTS 5 PCTINCREASE 0);

CREATE TABLE LOADS (
	LOAD_ID NUMBER(3) NOT NULL PRIMARY KEY,
	WEIGHT NUMBER(5,3),
	CUSTOMER_ID NUMBER(3) NOT NULL,
	TITLE VARCHAR2(30),
	CONSTRAINT fk_customers_loads foreign key (CUSTOMER_ID) 
	REFERENCES CUSTOMERS(CUSTOMER_ID)) 
PCTFREE 10
PCTUSED 80
STORAGE(INITIAL 50K NEXT 50K MAXEXTENTS 5 PCTINCREASE 0);


CREATE TABLE ROUTES(
	ROUTE_ID NUMBER(3) NOT NULL PRIMARY KEY,
	DRONE_ID NUMBER(3),
	LOAD_ID NUMBER(3),
	START_POINT VARCHAR2(40),
	END_POINT VARCHAR2(40),
	START_TIME DATE,
	END_TIME DATE,
	DISTANCE NUMBER(5,3),
	PRICE NUMBER(5,2),
	CONSTRAINT fk_drones_routes foreign key (DRONE_ID) 
	REFERENCES DRONES(DRONE_ID),
	CONSTRAINT fk_loads_routes foreign key (LOAD_ID) 
	REFERENCES LOADS(LOAD_ID))
PCTFREE 10
PCTUSED 80
STORAGE(INITIAL 50K NEXT 50K MAXEXTENTS 5 PCTINCREASE 0);


¿¡Œ“¿ —Œ —ÀŒ¬¿–≈Ã ƒ¿ÕÕ€’

SELECT TABLESPACE_NAME, PCT_FREE, PCT_USED, INITIAL_EXTENT,
 NEXT_EXTENT, MIN_EXTENTS, MAX_EXTENTS, PCT_INCREASE 
FROM USER_TABLES 
WHERE TABLE_NAME=íDRONESí;
(USER_USERS, ALL_USERS, USER_TABLES, USER_ROLE_PRIVS)

ƒŒ ›“Œ√Œ ﬁ«¿Õ”“‹(◊“Œ¡€ «Õ¿“‹ —“ŒÀ¡÷€ ¬Œ«ÃŒ∆Õ€≈):
DESC ALL_USERS;

CREATE SEQUENCE MY_SEQ
START WITH 1
INCREMENT BY 1
CACHE 100;


INSERT INTO DRONES VALUES (MY_SEQ.NEXTVAL, 'DJI PHANTOM 5', 1.38, 0.3, 12);
INSERT INTO DRONES VALUES (MY_SEQ.NEXTVAL, 'DDRONEST 500', 5.2, 2.5, 9);
INSERT INTO DRONES VALUES (MY_SEQ.NEXTVAL, 'DJI PHANTOM 6', 4, 1.2, 16);
INSERT INTO DRONES VALUES (MY_SEQ.NEXTVAL, 'ANDRONE T7', 2.5, 0.5, 13);
INSERT INTO DRONES VALUES (MY_SEQ.NEXTVAL, 'KARMADRONE', 1.1, 0.150, 25);


INSERT INTO CUSTOMERS VALUES (MY_SEQ.NEXTVAL, 'VASILYEV ARTHUR', 'ARTHUR.VASILYEV@GMAIL.COM');
INSERT INTO CUSTOMERS VALUES (MY_SEQ.NEXTVAL, 'PETROV PETR', 'PETR.PETROV@GMAIL.COM');
INSERT INTO CUSTOMERS VALUES (MY_SEQ.NEXTVAL, 'ELISEEVA MARIA', 'MARIA.ELISEEVA@MAIL.RU');
INSERT INTO CUSTOMERS VALUES (MY_SEQ.NEXTVAL, 'CHEKANOV DENIS', 'DENIS.CHEKANOV@GMAIL.COM');
INSERT INTO CUSTOMERS VALUES (MY_SEQ.NEXTVAL, 'MASK ELON', 'EXPLODEDROCKET@GMAIL.COM');
INSERT INTO CUSTOMERS VALUES (MY_SEQ.NEXTVAL, 'KRANCHEV OLEG', 'OLEG.KRANCHEV@GMAIL.COM');

INSERT INTO LOADS VALUES (MY_SEQ.NEXTVAL, 0.7, 6, 'SAMSUNG TABLET');
INSERT INTO LOADS VALUES (MY_SEQ.NEXTVAL, 0.2, 8, 'DOCUMENTS');
INSERT INTO LOADS VALUES (MY_SEQ.NEXTVAL, 2.1, 6, 'COCA-COLA');
INSERT INTO LOADS VALUES (MY_SEQ.NEXTVAL, 0.4, 7, 'BURGER');
INSERT INTO LOADS VALUES (MY_SEQ.NEXTVAL, 0.1, 10, 'MEDICINE');
INSERT INTO LOADS VALUES (MY_SEQ.NEXTVAL, 0.3, 7, 'EAR PODS');
INSERT INTO LOADS VALUES (MY_SEQ.NEXTVAL, 0.5, 8, 'BOOK');


INSERT INTO ROUTES VALUES (MY_SEQ.NEXTVAL, 1, 12, 'FREEDOM SQUARE 5', 'GIRSHMANA 4 STREET', TO_DATE('30/10/2016 21:02:44', 'dd/mm/yyyy hh24:mi:ss'), TO_DATE('30/10/2016 21:11:12', 'dd/mm/yyyy hh24:mi:ss'), 1.5, 0.9);
INSERT INTO ROUTES VALUES (MY_SEQ.NEXTVAL, 4, 13, 'BAKULINA 5', 'MOSKOVSKIY AVENUE 50', TO_DATE('02/11/2016 11:58:44', 'dd/mm/yyyy hh24:mi:ss'), TO_DATE('02/11/2016 12:20:15', 'dd/mm/yyyy hh24:mi:ss'), 4.7, 2.45);
INSERT INTO ROUTES VALUES (MY_SEQ.NEXTVAL, 2, 14, 'GAGARINA AVENUE 8-A', 'SPORTIVNA SUBWAY STATION 3', TO_DATE('05/11/2016 08:45:03', 'dd/mm/yyyy hh24:mi:ss'), TO_DATE('05/11/2016 09:01:08', 'dd/mm/yyyy hh24:mi:ss'), 2.3, 2.45);
INSERT INTO ROUTES VALUES (MY_SEQ.NEXTVAL, 3, 15, 'BARABASHOVA 56 STREET', 'HEROIV PRACI STREET 126', TO_DATE('20/10/2016 12:05:00', 'dd/mm/yyyy hh24:mi:ss'), TO_DATE('20/10/2016 12:16:23', 'dd/mm/yyyy hh24:mi:ss'), 3, 2);
INSERT INTO ROUTES VALUES (MY_SEQ.NEXTVAL, 5, 16, 'CHERNISHEVSKOGO 26 STREET', 'POLTAVSKIY SHLYAH 24-B STREET', TO_DATE('25/10/2016 03:02:20', 'dd/mm/yyyy hh24:mi:ss'), TO_DATE('25/10/2016 03:13:08', 'dd/mm/yyyy hh24:mi:ss'), 4.3, 2.2);
INSERT INTO ROUTES VALUES (MY_SEQ.NEXTVAL, 4, 17, 'YAROSLAVA MUDROGO 6 STREET', 'SUMSKAYA 10 STREET', TO_DATE('15/11/2016 23:58:00', 'dd/mm/yyyy hh24:mi:ss'), TO_DATE('16/11/2016 00:05:12', 'dd/mm/yyyy hh24:mi:ss'), 1.9, 1.1);
INSERT INTO ROUTES VALUES (MY_SEQ.NEXTVAL, 3, 18, 'CHICHIBABINA 3 STREET', 'CHERNISHEVSKOGO 6 STREET', TO_DATE('30/10/2016 12:02:12', 'dd/mm/yyyy hh24:mi:ss'), TO_DATE('30/10/2016 12:06:12', 'dd/mm/yyyy hh24:mi:ss'), 2.1, 0.7);

TOP::::
SELECT *
FROM Persons
WHERE ROWNUM <=5;


CREATE INDEX DRONE_ADD_WEIGHT_INDEX ON DRONES(ADD_WEIGHT);
SELECT INDEX_NAME, INDEX_TYPE FROM USER_INDEXES WHERE INDEX_NAME = 'DRONE_ADD_WEIGHT_INDEX';

FUNCTION PARAMETERS IN|OUT AND AS|IS???????????????????????

CREATE OR REPLACE FUNCTION LESS_THAN_AVG_DISTANCE 
RETURN INTEGER AS COUNT_ROWS INTEGER;
BEGIN
	SELECT COUNT(*) INTO COUNT_ROWS 
	FROM ROUTES 
	WHERE DISTANCE < (SELECT AVG(DISTANCE) FROM ROUTES);
	RETURN COUNT_ROWS;
END LESS_THAN_AVG_DISTANCE;

SELECT LESS_THAN_AVG_DISTANCE FROM DUAL;

#œ–Œ÷≈Õ“ œŒ ”œ¿“≈À≈…,  Œ“Œ–€… —ƒ≈À¿À» «¿ ¿« ¡ŒÀ‹ÿ≈ Ì –¿«
CREATE OR REPLACE FUNCTION EFFECTIVE_CUSTOMERS_PERCENT(ROUTES_COUNT INTEGER)
RETURN NUMBER
AS PERCENT NUMBER(6,2);
NEEDED_CUSTOMERS NUMBER(6,2);
ALL_CUSTOMERS NUMBER(6,2);
BEGIN 
	SELECT COUNT(*) INTO NEEDED_CUSTOMERS FROM (
		SELECT LOADS.CUSTOMER_ID, COUNT(ROUTES.ROUTE_ID) 
		FROM LOADS, ROUTES 
		WHERE LOADS.LOAD_ID = ROUTES.LOAD_ID 
		GROUP BY LOADS.CUSTOMER_ID 
		HAVING COUNT(ROUTES.ROUTE_ID) >= ROUTES_COUNT);
	SELECT COUNT(*) INTO ALL_CUSTOMERS FROM CUSTOMERS;
	PERCENT :=(NEEDED_CUSTOMERS/ALL_CUSTOMERS)*100;
	RETURN(PERCENT);
END EFFECTIVE_CUSTOMERS_PERCENT;




#—Œ«ƒ¿“‹ —»ÕŒÕ»Ã
CREATE SYNONYM DRONE_TABLE FOR DRONES;

#”ƒ¿À»“‹ —»ÕŒÕ»Ã
DROP SYNONYM DRONE_TABLE;

#VIEWS
CREATE OR REPLACE VIEW DRONE_STAT_VIEW(DRONE_ID, MODEL, TOTAL_ROUTES, TOTAL_DISTANCE, TOTAL_TIME) AS
	SELECT DRONES.DRONE_ID, DRONES.MODEL, COUNT(ROUTES.ROUTE_ID), SUM(ROUTES.DISTANCE), SUM((ROUTES.END_TIME - ROUTES.START_TIME)*24*60*60)
	FROM DRONES, ROUTES
	WHERE DRONES.DRONE_ID = ROUTES.DRONE_ID
	GROUP BY DRONES.DRONE_ID, DRONES.MODEL;

CREATE OR REPLACE VIEW CUSTOMER_STAT_VIEW(CUSTOMER_ID, CUSTOMER_NAME, TOTAL_ROUTES, TOTAL_DISTANCE, TOTAL_PRICE) AS
SELECT CUSTOMERS.CUSTOMER_ID, CUSTOMERS.NAME, COUNT(ROUTES.ROUTE_ID), SUM(ROUTES.DISTANCE), SUM(ROUTES.PRICE)
FROM CUSTOMERS, ROUTES, LOADS
WHERE CUSTOMERS.CUSTOMER_ID = LOADS.CUSTOMER_ID AND LOADS.LOAD_ID = ROUTES.LOAD_ID
GROUP BY CUSTOMERS.CUSTOMER_ID, CUSTOMERS.NAME
ORDER BY CUSTOMERS.NAME;

CREATE OR REPLACE VIEW DAY_STAT_VIEW(DAY_DATE, TOTAL_ROUTES, TOTAL_DISTANCE, TOTAL_PRICE, TOTAL_WEIGHT) AS
SELECT TO_CHAR(START_TIME, 'DD/MM/YYYY') AS DAY_DATE, COUNT(ROUTE_ID), SUM(DISTANCE), SUM(LOADS.WEIGHT), SUM(PRICE)
FROM ROUTES, LOADS
WHERE LOADS.LOAD_ID = ROUTES.LOAD_ID
GROUP BY TO_CHAR(START_TIME, 'DD/MM/YYYY')
ORDER BY TO_DATE(DAY_DATE);

#FUnctions and PROCEDURES
CREATE OR REPLACE FUNCTION EFFECTIVE_ADDWEIGHT_PERCENT(DRONE IN DRONES.DRONE_ID%TYPE)
RETURN NUMBER
AS PERCENT NUMBER(6,2);
AVGWEIGHT NUMBER(6,2);
ADDWEIGHT NUMBER(6,2);
BEGIN
SELECT AVG(LOADS.WEIGHT) INTO AVGWEIGHT 
	FROM LOADS, ROUTES 
	WHERE LOADS.LOAD_ID = ROUTES.LOAD_ID AND ROUTES.DRONE_ID = DRONE;
SELECT ADD_WEIGHT INTO ADDWEIGHT FROM DRONES WHERE DRONE_ID = DRONE;
PERCENT :=(AVGWEIGHT/ADDWEIGHT)*100;
RETURN(PERCENT);
END EFFECTIVE_ADDWEIGHT_PERCENT;

CREATE OR REPLACE FUNCTION GET_DRONE_TO_TRANSPORT(MY_WEIGHT IN DRONES.ADD_WEIGHT%TYPE)
RETURN NUMBER
AS DRONE NUMBER(3);
NUM NUMBER(3);
BEGIN
SELECT DRONE_ID INTO NUM FROM DRONES 
	WHERE ADD_WEIGHT >= MY_WEIGHT AND ROWNUM = 1
	ORDER BY ADD_WEIGHT;
DRONE := NUM;
RETURN(DRONE);
END GET_DRONE_TO_TRANSPORT;


CREATE OR REPLACE PROCEDURE TEMPORARY_WEEK_DISCOUNT(CUSTOMER IN CUSTOMERS.CUSTOMER_ID%TYPE, PERCENT INTEGER)
IS
BEGIN
	UPDATE ROUTES
	SET PRICE = PRICE*((100 - PERCENT)/100)
	WHERE LOAD_ID IN (
		SELECT LOAD_ID FROM LOADS WHERE CUSTOMER_ID = CUSTOMER)
	AND START_TIME >= SYSDATE AND START_TIME <= SYSDATE + 7;
	COMMIT;
END TEMPORARY_WEEK_DISCOUNT;










#string example!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

declare
  in_string varchar2(20) := 'Im a string';
  in_length number;
  cnt number := 0;
  in_char char(1);
begin
  in_length := length(in_string);
  while (cnt < in_length)
  loop
    cnt := cnt + 1;
    in_char := substr(in_string, cnt, 1);
    -- do something wonderful here

  end loop;
exception
  when others then raise;
end;
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



CREATE OR REPLACE FUNCTION CUT_STRING(MY_STR VARCHAR2, N INTEGER, M INTEGER)
RETURN VARCHAR2
AS RES VARCHAR2(20);
BEGIN
	SELECT SUBSTR(MY_STR, 1, M - 1) || SUBSTR(MY_STR, N + M) INTO RES FROM DUAL;
RETURN(RES);
END CUT_STRING;




CREATE OR REPLACE FUNCTION PUSH_STARS(STR1 VARCHAR2, STR2 VARCHAR2)
RETURN VARCHAR2
AS RES VARCHAR2(30);
BEGIN
	IF (LENGTH(STR1) < LENGTH(STR2)) THEN
		SELECT LPAD(STR1, LENGTH(STR2), '*') INTO RES FROM DUAL;
	ELSIF (LENGTH(STR2) < LENGTH(STR1)) THEN
		SELECT LPAD(STR2, LENGTH(STR1), '*') INTO RES FROM DUAL;
	END IF;
RETURN(RES);
END PUSH_STARS;


CREATE OR REPLACE FUNCTION SHUFFLE_STRINGS(STR1 VARCHAR2, STR2 VARCHAR2)
RETURN VARCHAR2
AS RES VARCHAR2(30);
LEN INTEGER := 0;
ENDING VARCHAR2(20);
BEGIN
	IF (LENGTH(STR1) < LENGTH(STR2)) THEN
		LEN := LENGTH(STR1);
		SELECT SUBSTR(STR2, LEN + 1) INTO ENDING FROM DUAL;
	ELSE
		LEN := LENGTH(STR2);
		SELECT SUBSTR(STR1, LEN + 1) INTO ENDING FROM DUAL;
	END IF;
	FOR I IN 1..LEN LOOP
		SELECT RES || SUBSTR(STR1, I, 1) || SUBSTR(STR2, I, 1) INTO RES FROM DUAL;
	END LOOP;
	RES := RES || ENDING;
RETURN(RES);
END SHUFFLE_STRINGS;



CREATE OR REPLACE FUNCTION COMMON_LETTERS(STR1 VARCHAR2, STR2 VARCHAR2)
RETURN VARCHAR2
AS RES VARCHAR2(30);
LETTER VARCHAR2(1);
BEGIN
	FOR I IN 1..LENGTH(STR1) LOOP
		SELECT SUBSTR(STR1, I, 1) INTO LETTER FROM DUAL;
		IF INSTR(STR2, LETTER) > 0 THEN
			RES := RES || LETTER;
		END IF;
	END LOOP;
RETURN(RES);
END COMMON_LETTERS;

CREATE OR REPLACE FUNCTION DIFF_LETTERS(STR1 VARCHAR2, STR2 VARCHAR2)
RETURN VARCHAR2
AS RES VARCHAR2(30);
LETTER VARCHAR2(1);
BEGIN
	FOR I IN 1..LENGTH(STR1) LOOP
		SELECT SUBSTR(STR1, I, 1) INTO LETTER FROM DUAL;
		IF INSTR(STR2, LETTER) = 0 THEN
			RES := RES || LETTER;
		END IF;
	END LOOP;
	FOR I IN 1..LENGTH(STR2) LOOP
		SELECT SUBSTR(STR2, I, 1) INTO LETTER FROM DUAL;
		IF INSTR(STR1, LETTER) = 0 THEN
			RES := RES || LETTER;
		END IF;
	END LOOP;
RETURN(RES);
END DIFF_LETTERS;

-----------------------------------------------------------------------------
LABA 2
-----------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE TEMPORARY_WEEK_DISCOUNT(CUSTOMER IN CUSTOMERS.CUSTOMER_ID%TYPE, PERCENT INTEGER)
IS
BEGIN
	UPDATE ROUTES
	SET PRICE = PRICE*((100 - PERCENT)/100)
	WHERE LOAD_ID IN (
		SELECT LOAD_ID FROM LOADS WHERE CUSTOMER_ID = CUSTOMER)
	AND START_TIME >= SYSDATE AND START_TIME <= SYSDATE + 7;
	COMMIT;
END TEMPORARY_WEEK_DISCOUNT;





CREATE OR REPLACE FUNCTION Display_Customers(cust varchar2)
RETURN VARCHAR2
is
RES VARCHAR2(400);
CUST_NAME VARCHAR2(30);
CURSOR c1 IS SELECT title from customers, loads where loads.Customer_Id = customers.customer_id and name = cust;
BEGIN
	open c1;
	fetch c1 into res;
	if c1%notfound = false then
		
	loop
		fetch c1 into cust_name;
		res := res || ', ' || cust_name;
	exit when c1%notfound;
	end loop;
	end if;
	
RETURN(RES);
END Display_Customers;
/

select display_customers('VASILYEV ARTHUR') from dual;



CREATE OR REPLACE PROCEDURE DISCOUNT(wei IN LOADS.WEIGHT%TYPE)
IS
PR NUMBER(5,3);
cursor load_ids is select load_id from loads where weight > wei;
cursor route_price(load number) is select route_id, price from routes where load_id = load for update;
BEGIN
	FOR I IN LOAD_ids loop
		for j in route_price(i.load_id) loop
			pr := j.price * 0.8;
			update routes set routes.price = pr where current of route_price;
		end loop;
	end loop;
END DISCOUNT;
/



create table want_my_five
(
id number(4) primary key,
minspeed number(5,2),
maxspeed number(5,2),
drones varchar2(300)
);


CREATE OR REPLACE PROCEDURE fill_five_table(numb number)
IS
minspeed number(5,2);
maxspeed1 number(5,2);
step number(5,2);

drones_str varchar2(300);
maxspeed_drone varchar2(100) := '';
cursor max_speed_drones(maxsp number) is select model from drones where speed = maxsp;

BEGIN
	delete from want_my_five;
	select max(speed), min(speed) into maxspeed1, minspeed from drones;
	step := (maxspeed1 - minspeed)/numb;
	
	for i in 1..numb loop
		drones_str := get_drones(minspeed + (i-1)* step, minspeed + i * step);
		if i = numb then			
			for rec in max_speed_drones(maxspeed1) loop
				maxspeed_drone := maxspeed_drone || ',' || rec.model;
			end loop;
			drones_str := drones_str || maxspeed_drone;			
			insert into want_my_five values (my_seq.nextval, minspeed + (i-1)* step, maxspeed1, ltrim(drones_str, ','));
		else
			insert into want_my_five values (my_seq.nextval, minspeed + (i-1)* step, minspeed + i * step, ltrim(drones_str, ','));
		end if;
	end loop;
	
END fill_five_table;
/

exec fill_five_table(4);


CREATE OR REPLACE FUNCTION get_drones(min number, max number)
RETURN VARCHAR2
is
RES VARCHAR2(400);
CURSOR c1 IS SELECT model from drones where speed >= min and speed < max;
BEGIN
	for rec in c1 loop
		res := res || ',' || rec.model;
	end loop;
	
RETURN(RES);
END get_drones;
/
select get_drones(10,17) from dual;





